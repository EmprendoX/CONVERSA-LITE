TaskMaster Rules ‚Äì ConversaX Lite
üéØ Principio General
Todas las tareas, c√≥digo y decisiones deben cumplir con el PRD ‚Äì ConversaX Lite.
Nada fuera de este PRD puede implementarse sin autorizaci√≥n expl√≠cita.
El sistema debe ser r√°pido de desplegar, simple de mantener y orientado a un solo cliente.

1) Stack Autorizado
	‚Ä¢ Backend: Node.js + Express
	‚Ä¢ Frontend (opcional): React + Vite + Tailwind (solo Leads & Items Panel)
	‚Ä¢ DB: Supabase (Postgres)
	‚Ä¢ Vector DB: Chroma (default) o Pinecone (si remoto)
	‚Ä¢ IA: OpenAI (text-embedding-3-small y gpt-4o-mini o gpt-4.1)
	‚Ä¢ Canal Mensajer√≠a: WhatsApp Cloud API (Twilio solo fallback)
	‚Ä¢ Seguridad: JWT, HMAC (X-Hub-Signature-256), .env obligatorio
‚ö†Ô∏è Prohibido:
	‚Ä¢ Agregar frameworks no mencionados.
	‚Ä¢ Usar servicios externos no especificados.
	‚Ä¢ Inventar librer√≠as o dependencias ‚Äúraras‚Äù.

2) Reglas de Arquitectura
	‚Ä¢ src/api ‚Üí solo routers (whatsapp.ts, chat.ts, items.ts, tools.ts).
	‚Ä¢ src/lib ‚Üí l√≥gica de negocio (rag.ts, intents.ts, validators.ts, meta.ts).
	‚Ä¢ app.ts ‚Üí inicializaci√≥n √∫nica, sin l√≥gica de negocio.
	‚Ä¢ Cada endpoint debe:
		‚óã Validar inputs.
		‚óã Manejar errores sin romper el flujo (fallback seguro).
		‚óã Loggear en analytics_events.

3) Reglas de Seguridad
	1. Nunca exponer secretos en logs, commits ni respuestas.
	2. Siempre validar firma HMAC en /api/whatsapp.
	3. Idempotencia obligatoria: todos los message.id deben ser √∫nicos.
	4. Logs seguros: datos PII m√≠nimos, cifrado en reposo si aplica.
	5. Errores cr√≠ticos: deben resolverse con fallback ‚Üí ‚ÄúGracias, ya te ayudo con eso‚Ä¶‚Äù en lugar de romper el chat.

4) Reglas de RAG
	‚Ä¢ Indexar cat√°logo en embeddings con text-embedding-3-small.
	‚Ä¢ retrieveContext() debe devolver al menos topK=3 snippets.
	‚Ä¢ El bot solo responde con datos del cat√°logo + historial de sesi√≥n.
	‚Ä¢ Prohibido inventar precios, stock o pol√≠ticas.
	‚Ä¢ Si falta informaci√≥n ‚Üí el bot debe preguntar.

5) Reglas de Intenciones & 
	‚Ä¢ Cada respuesta debe terminar con un bloque <ANALYTICS>...</ANALYTICS> v√°lido.
	‚Ä¢ Si falta o es inv√°lido ‚Üí reintentar validaci√≥n 1 vez.
	‚Ä¢ Si sigue fallando ‚Üí fallback gen√©rico + log de error.
	‚Ä¢ Motor de acciones:
		‚óã BUY_INTENT_FIRM ‚Üí CREATE_LEAD + send_payment_link
		‚óã APPOINTMENT_SCHEDULING ‚Üí SCHEDULE_CALL
		‚óã SHIPPING_QUOTE ‚Üí pedir CP si falta ‚Üí SEND_SHIPPING_QUOTE
		‚óã PURCHASE_OBJECTION ‚Üí manejo objeci√≥n + SEND_CATALOG
		‚óã ORDER_STATUS ‚Üí SEND_TRACKING o ESCALATE
Escalar inmediatamente: queja legal, VIP, reembolso alto, negativo repetido.

6) Reglas de Endpoints
	‚Ä¢ /api/whatsapp
		‚óã GET ‚Üí verify token.
		‚óã POST ‚Üí validar firma, idempotencia, llamar handleInboundMessage().
	‚Ä¢ /api/chat
		‚óã POST ‚Üí input {message, sessionId}.
		‚óã Llama retrieveContext + callLLM + validateAnalytics.
	‚Ä¢ /api/items
		‚óã CRUD b√°sico (title, desc, price, url).
	‚Ä¢ /api/tools
		‚óã Acciones seguras (send_payment_link, schedule_call, send_catalog_snippet).
	‚Ä¢ Todos los endpoints deben devolver 200 OK r√°pido a WhatsApp (aunque internamente haya error).

7) Reglas de Tests
	‚Ä¢ Unit obligatorio: validadores (validateAnalytics, HMAC).
	‚Ä¢ Integraci√≥n: /api/whatsapp ‚Üí /api/chat ‚Üí /api/tools.
	‚Ä¢ E2E: mensaje real desde tester ‚Üí lead en Supabase.
	‚Ä¢ Casos de error: firma inv√°lida, 24h cerrada, rate limit LLM.

8) Reglas de Observabilidad
	‚Ä¢ correlation_id en todos los eventos.
	‚Ä¢ Alertar si:
			¬ß 5% errores de firma HMAC.
		‚óã p95 > 3s en /api/chat.
	‚Ä¢ Fallback obligatorio si LLM falla o est√° en outage.

9) Reglas de Lanzamiento
Antes de entregar al cliente:
	‚Ä¢ Webhook verificado (200 OK).
	‚Ä¢ Cat√°logo cargado + embeddings creados.
	‚Ä¢ Prompt de sistema probado con 3 few-shots.
	‚Ä¢ Buttons/List funcionando.
	‚Ä¢ Lead guardado en Supabase.
	‚Ä¢ Link de pago probado.
	‚Ä¢ Video corto de E2E (prueba real).
	‚Ä¢ Documentaci√≥n m√≠nima para cliente (acceso + credenciales).

10) Reglas de Blindaje
	‚Ä¢ Nunca mezclar features de SaaS multi-tenant aqu√≠.
	‚Ä¢ Nunca agregar endpoints de billing o onboarding masivo.
	‚Ä¢ Nunca salir del alcance de este PRD.
	‚Ä¢ Siempre basarse en el cat√°logo + taxonom√≠a de intenciones V2.
	‚Ä¢ Siempre priorizar simplicidad, despliegue r√°pido y mantenimiento m√≠nimo.
	
11) üö® Reglas de Base de Datos ‚Äì Supabase
	1. Uniformidad absoluta: todo el c√≥digo debe basarse √∫nicamente en las tablas y columnas ya definidas en Supabase para este proyecto.
	2. Prohibido renombrar, eliminar o inventar columnas/tablas.
	3. Consistencia: el c√≥digo, migraciones y queries deben usar siempre los mismos nombres y tipos que ya existen en la base.
	4. Extensi√≥n controlada: si se requiere un nuevo campo, debe agregarse como extensi√≥n documentada, nunca alterando ni rompiendo lo ya creado.
	5. Validaci√≥n previa: antes de generar c√≥digo que interact√∫e con la base, confirmar que la tabla y columna usada existe en Supabase; si no, loggear error y usar fallback seguro.
Snake_case obligatorio: nunca transformar a camelCase ni otros formatos.